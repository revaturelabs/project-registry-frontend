name: CI/CD
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    types: [opened, synchronize, reopened]
env:
  APP_NAME: ${{ secrets.APP_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}
jobs:
  analyze:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Resolving dependencies
        run: npm ci
      - run: npm run lint
      - name: Run tests
        run: node ./node_modules/@angular/cli/bin/ng test --no-watch --no-progress --browsers=ChromeHeadless --code-coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build:
    name: Build Image
    needs: [analyze]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build the image
        id: docker-build
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
  deploy:
    needs: [build]
    name: Deploy on EKS
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EKS
        run: |
          aws configure set aws_access_key_id $EKS_ACCESS_KEY_ID --profile p3
          aws configure set aws_secret_access_key $EKS_SECRET_ACCESS_KEY --profile p3
          aws configure set default.region $AWS_REGION --profile p3
          aws eks --region $AWS_REGION update-kubeconfig --profile p3 --name $CLUSTER_NAME
          kubectl --namespace default set image deploy/$APP_NAME-deployment $APP_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kubectl --namespace default rollout status deploy/$APP_NAME-deployment